{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-step-component",
  "type": "registry:component",
  "title": "Multi Step Component",
  "description": "UI component for Multi Step Component.",
  "files": [
    {
      "path": "components/ui/multi-step-component.tsx",
      "content": "import * as React from \"react\";\r\nimport { useState, useMemo } from \"react\";\r\nimport { motion, AnimatePresence, MotionConfig } from \"motion/react\";\r\nimport type { Transition } from \"motion\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardFooter,\r\n} from \"./card\";\r\nimport { Button } from \"./button\";\r\nimport { Check } from \"lucide-react\";\r\n\r\ninterface Step {\r\n  title: string;\r\n  content: React.ReactNode;\r\n  description?: string | React.ReactNode;\r\n}\r\n\r\ninterface MultiStepProps {\r\n  steps: Step[];\r\n  defaultStep?: number;\r\n  className?: string;\r\n  backButtonLabel?: string;\r\n  nextButtonLabel?: string;\r\n  completeButtonLabel?: string;\r\n  transition?: Transition;\r\n  onNext?: (currentStep: number) => void;\r\n  onBack?: (currentStep: number) => void;\r\n  onComplete?: () => void;\r\n}\r\n\r\n// Stepper bile≈üeni\r\nfunction Stepper({\r\n  steps,\r\n  currentStep,\r\n}: {\r\n  steps: Step[];\r\n  currentStep: number;\r\n}) {\r\n  return (\r\n    <div className=\"flex items-center justify-center gap-2 mb-6 select-none\">\r\n      {steps.map((_, idx) => (\r\n        <React.Fragment key={idx}>\r\n          <motion.div\r\n            initial={false}\r\n            animate={{\r\n              backgroundColor:\r\n                idx === currentStep\r\n                  ? \"#2563eb\" // blue-600\r\n                  : idx < currentStep\r\n                  ? \"#22c55e\" // green-500\r\n                  : \"#e5e7eb\", // zinc-200\r\n              borderColor:\r\n                idx === currentStep\r\n                  ? \"#2563eb\"\r\n                  : idx < currentStep\r\n                  ? \"#22c55e\"\r\n                  : \"#e5e7eb\",\r\n              scale: idx === currentStep ? 1.1 : 1,\r\n              boxShadow:\r\n                idx === currentStep\r\n                  ? \"0 2px 8px 0 rgba(37,99,235,0.15)\"\r\n                  : \"none\",\r\n            }}\r\n            transition={{ type: \"spring\", bounce: 0.3, duration: 0.4 }}\r\n            className={\r\n              \"flex items-center justify-center w-8 h-8 rounded-full border-2 border-zinc-200 dark:border-zinc-700 relative z-10 bg-white dark:bg-zinc-900\"\r\n            }\r\n          >\r\n            {idx < currentStep && (\r\n              <motion.span\r\n                initial={{ scale: 0, opacity: 0 }}\r\n                animate={{ scale: 1, opacity: 1 }}\r\n                exit={{ scale: 0, opacity: 0 }}\r\n                transition={{ type: \"spring\", bounce: 0.5, duration: 0.3 }}\r\n                className=\"text-green-600 dark:text-green-400 text-xl font-bold\"\r\n                style={{ lineHeight: 1 }}\r\n              >\r\n                <Check size={16} className=\"text-white dark:text-white\" />\r\n              </motion.span>\r\n            )}\r\n          </motion.div>\r\n          {idx < steps.length - 1 && (\r\n            <motion.div\r\n              initial={false}\r\n              animate={{\r\n                backgroundColor: idx < currentStep ? \"#22c55e\" : \"#e5e7eb\",\r\n                scaleY: 1,\r\n              }}\r\n              transition={{ type: \"spring\", bounce: 0.3, duration: 0.4 }}\r\n              className=\"h-1 w-6 sm:w-10 rounded bg-zinc-200 dark:bg-zinc-700\"\r\n              style={{ margin: \"0 2px\" }}\r\n            />\r\n          )}\r\n        </React.Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MultiStep({\r\n  steps,\r\n  defaultStep = 0,\r\n  className,\r\n  backButtonLabel = \"Back\",\r\n  nextButtonLabel = \"Continue\",\r\n  completeButtonLabel = \"Finish\",\r\n  transition = { duration: 0.5, type: \"spring\", bounce: 0 },\r\n  onNext,\r\n  onBack,\r\n  onComplete,\r\n}: MultiStepProps) {\r\n  const [currentStep, setCurrentStep] = useState(defaultStep);\r\n  const [direction, setDirection] = useState<\"next\" | \"back\">(\"next\");\r\n\r\n  const handleNext = () => {\r\n    if (currentStep < steps.length - 1) {\r\n      setDirection(\"next\");\r\n      setCurrentStep((prev) => prev + 1);\r\n      onNext?.(currentStep);\r\n    } else {\r\n      setDirection(\"next\");\r\n      setCurrentStep(0);\r\n      onComplete?.();\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    if (currentStep > 0) {\r\n      setDirection(\"back\");\r\n      setCurrentStep((prev) => prev - 1);\r\n      onBack?.(currentStep);\r\n    }\r\n  };\r\n\r\n  const content = useMemo(\r\n    () => steps[currentStep]?.content || null,\r\n    [currentStep, steps]\r\n  );\r\n\r\n  const variants = {\r\n    initial: (direction: \"next\" | \"back\") => ({\r\n      x: direction === \"next\" ? 70 : -70,\r\n      opacity: 0,\r\n    }),\r\n    animate: {\r\n      x: 0,\r\n      opacity: 1,\r\n    },\r\n    exit: (direction: \"next\" | \"back\") => ({\r\n      x: direction === \"next\" ? -70 : 70,\r\n      opacity: 0,\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        \"p-4 sm:p-6 w-full max-w-[90%] sm:max-w-lg md:max-w-2xl mx-auto shadow-lg rounded-lg overflow-hidden\",\r\n        className\r\n      )}\r\n    >\r\n      <MotionConfig transition={transition}>\r\n        <Stepper steps={steps} currentStep={currentStep} />\r\n        <CardHeader className=\"text-center\">\r\n          <CardTitle className=\"text-xl sm:text-2xl font-semibold\">\r\n            <AnimatePresence\r\n              mode=\"popLayout\"\r\n              initial={false}\r\n              custom={direction}\r\n            >\r\n              <motion.div\r\n                key={currentStep}\r\n                variants={variants}\r\n                initial=\"initial\"\r\n                animate=\"animate\"\r\n                exit=\"exit\"\r\n                custom={direction}\r\n                aria-current=\"step\"\r\n              >\r\n                {steps[currentStep]?.title}\r\n              </motion.div>\r\n            </AnimatePresence>\r\n          </CardTitle>\r\n          {steps[currentStep]?.description && (\r\n            <CardDescription className=\"text-sm sm:text-base text-muted-foreground mt-2 overflow-hidden\">\r\n              <AnimatePresence\r\n                mode=\"popLayout\"\r\n                initial={false}\r\n                custom={direction}\r\n              >\r\n                <motion.div\r\n                  key={currentStep}\r\n                  variants={variants}\r\n                  initial=\"initial\"\r\n                  animate=\"animate\"\r\n                  exit=\"exit\"\r\n                  custom={direction}\r\n                >\r\n                  {steps[currentStep]?.description}\r\n                </motion.div>\r\n              </AnimatePresence>\r\n            </CardDescription>\r\n          )}\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"min-h-[150px] sm:min-h-[200px] flex items-center justify-center overflow-hidden\">\r\n          <AnimatePresence mode=\"popLayout\" initial={false} custom={direction}>\r\n            <motion.div\r\n              key={currentStep}\r\n              variants={variants}\r\n              initial=\"initial\"\r\n              animate=\"animate\"\r\n              exit=\"exit\"\r\n              custom={direction}\r\n              className=\"w-full\"\r\n            >\r\n              {content}\r\n            </motion.div>\r\n          </AnimatePresence>\r\n        </CardContent>\r\n\r\n        <CardFooter className=\"flex justify-between gap-4 overflow-hidden\">\r\n          <Button\r\n            variant=\"outline\"\r\n            disabled={currentStep === 0}\r\n            onClick={handleBack}\r\n            aria-label={backButtonLabel}\r\n            className=\"w-full sm:w-auto\"\r\n          >\r\n            {backButtonLabel}\r\n          </Button>\r\n          <Button\r\n            variant=\"default\"\r\n            onClick={handleNext}\r\n            aria-label={\r\n              currentStep === steps.length - 1\r\n                ? completeButtonLabel\r\n                : nextButtonLabel\r\n            }\r\n            className=\"w-full sm:w-auto\"\r\n          >\r\n            {currentStep === steps.length - 1\r\n              ? completeButtonLabel\r\n              : nextButtonLabel}\r\n          </Button>\r\n        </CardFooter>\r\n      </MotionConfig>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport { MultiStep };\r\nexport type { Step };\r\n",
      "type": "registry:component"
    }
  ]
}