{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar-group",
  "type": "registry:component",
  "title": "Avatar Group",
  "description": "UI component for Avatar Group.",
  "dependencies": ["motion"],
  "registryDependencies": ["avatar", "tooltip"],
  "files": [
    {
      "path": "components/ui/avatar-group.tsx",
      "content": "import * as React from \"react\";\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"./avatar\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n  Tooltip,\r\n} from \"./tooltip\";\r\nimport { motion } from \"motion/react\";\r\n\r\ninterface AvatarGroupProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  avatars: {\r\n    src?: string;\r\n    alt?: string;\r\n    fallback?: string;\r\n  }[];\r\n  max?: number;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n}\r\n\r\nconst sizeClasses = {\r\n  sm: \"size-6\",\r\n  md: \"size-8\",\r\n  lg: \"size-10\",\r\n};\r\n\r\nexport function AvatarGroup({\r\n  avatars,\r\n  max = 5,\r\n  size = \"md\",\r\n  className,\r\n  ...props\r\n}: AvatarGroupProps) {\r\n  const visibleAvatars = avatars.slice(0, max);\r\n  const remainingCount = avatars.length - max;\r\n\r\n  return (\r\n    <TooltipProvider>\r\n      <div className={cn(\"flex -space-x-4\", className)} {...props}>\r\n        {visibleAvatars.map((avatar, index) => (\r\n          <Tooltip key={index}>\r\n            <TooltipTrigger asChild>\r\n              <motion.div\r\n                whileHover={{ y: -10 }}\r\n                transition={{ duration: 0.2, type: \"spring\", stiffness: 150 }}\r\n              >\r\n                <Avatar\r\n                  className={cn(\r\n                    \"border-2 border-background\",\r\n                    sizeClasses[size],\r\n                    className\r\n                  )}\r\n                >\r\n                  <AvatarImage src={avatar.src} alt={avatar.alt || \"\"} />\r\n                  <AvatarFallback>\r\n                    {avatar.fallback || avatar.alt?.[0] || \"?\"}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n              </motion.div>\r\n            </TooltipTrigger>\r\n            <TooltipContent side=\"top\">\r\n              <div className=\"flex flex-col gap-1\">\r\n                <p className=\"font-medium\">{avatar.alt}</p>\r\n                {avatar.fallback && (\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    {avatar.fallback}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            </TooltipContent>\r\n          </Tooltip>\r\n        ))}\r\n        {remainingCount > 0 && (\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>\r\n              <motion.div\r\n                whileHover={{ y: -10 }}\r\n                transition={{ duration: 0.2, type: \"spring\", stiffness: 150 }}\r\n              >\r\n                <Avatar\r\n                  className={cn(\r\n                    \"border-2 border-background bg-muted\",\r\n                    sizeClasses[size]\r\n                  )}\r\n                >\r\n                  <AvatarFallback>+{remainingCount}</AvatarFallback>\r\n                </Avatar>\r\n              </motion.div>\r\n            </TooltipTrigger>\r\n            <TooltipContent side=\"top\">\r\n              <p className=\"text-sm\">View {remainingCount} more people</p>\r\n            </TooltipContent>\r\n          </Tooltip>\r\n        )}\r\n      </div>\r\n    </TooltipProvider>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}
