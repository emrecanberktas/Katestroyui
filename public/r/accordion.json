{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:component",
  "title": "Accordion",
  "description": "UI component for Accordion.",
  "files": [
    {
      "path": "components/ui/accordion.tsx",
      "content": "import * as React from \"react\";\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\r\nimport { ChevronDownIcon } from \"lucide-react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst AccordionContext = React.createContext<{\r\n  value: string | string[];\r\n  type: \"single\" | \"multiple\";\r\n} | null>(null);\r\n\r\nconst AccordionItemContext = React.createContext<{\r\n  value: string;\r\n} | null>(null);\r\n\r\nfunction useAccordion() {\r\n  const context = React.useContext(AccordionContext);\r\n  if (!context) {\r\n    throw new Error(\"Accordion components must be used within an Accordion\");\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction useAccordionItem() {\r\n  const context = React.useContext(AccordionItemContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      \"AccordionItem components must be used within an AccordionItem\"\r\n    );\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction Accordion({\r\n  type = \"single\",\r\n  value,\r\n  onValueChange,\r\n  defaultValue,\r\n  ...props\r\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\r\n  const [internalValue, setInternalValue] = React.useState<string | string[]>(\r\n    type === \"single\" ? \"\" : []\r\n  );\r\n  const isControlled = value !== undefined && onValueChange !== undefined;\r\n  const currentValue = isControlled ? value : internalValue;\r\n  const setCurrentValue = isControlled ? onValueChange : setInternalValue;\r\n\r\n  const contextValue = React.useMemo(\r\n    () => ({ value: currentValue, type }),\r\n    [currentValue, type]\r\n  );\r\n\r\n  return (\r\n    <AccordionContext.Provider value={contextValue}>\r\n      {type === \"single\" ? (\r\n        <AccordionPrimitive.Root\r\n          type=\"single\"\r\n          value={currentValue as string}\r\n          onValueChange={setCurrentValue as (value: string) => void}\r\n          defaultValue={defaultValue as string | undefined}\r\n          data-slot=\"accordion\"\r\n          {...props}\r\n        />\r\n      ) : (\r\n        <AccordionPrimitive.Root\r\n          type=\"multiple\"\r\n          value={currentValue as string[]}\r\n          onValueChange={setCurrentValue as (value: string[]) => void}\r\n          defaultValue={defaultValue as string[] | undefined}\r\n          data-slot=\"accordion\"\r\n          {...props}\r\n        />\r\n      )}\r\n    </AccordionContext.Provider>\r\n  );\r\n}\r\n\r\nfunction AccordionItem({\r\n  className,\r\n  value,\r\n  ...props\r\n}: React.ComponentProps<typeof AccordionPrimitive.Item> & { value: string }) {\r\n  const contextValue = React.useMemo(() => ({ value }), [value]);\r\n\r\n  return (\r\n    <AccordionItemContext.Provider value={contextValue}>\r\n      <motion.div\r\n        whileHover={{ scale: 1.02, transition: { duration: 0.3 } }}\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.3, ease: \"easeOut\" }}\r\n        className={cn(\"border-b last:border-b-0\", className)}\r\n      >\r\n        <AccordionPrimitive.Item\r\n          data-slot=\"accordion-item\"\r\n          value={value}\r\n          {...props}\r\n        />\r\n      </motion.div>\r\n    </AccordionItemContext.Provider>\r\n  );\r\n}\r\n\r\nfunction AccordionTrigger({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\r\n  const { value: accordionValue, type } = useAccordion();\r\n  const { value: itemValue } = useAccordionItem();\r\n  const isOpen =\r\n    type === \"single\"\r\n      ? accordionValue === itemValue\r\n      : accordionValue.includes(itemValue);\r\n\r\n  return (\r\n    <AccordionPrimitive.Header className=\"flex\">\r\n      <AccordionPrimitive.Trigger\r\n        data-slot=\"accordion-trigger\"\r\n        className={cn(\r\n          \"flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <motion.div\r\n          animate={{ rotate: isOpen ? 180 : 0 }}\r\n          transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n          className=\"size-4 shrink-0 translate-y-0.5\"\r\n        >\r\n          <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0\" />\r\n        </motion.div>\r\n      </AccordionPrimitive.Trigger>\r\n    </AccordionPrimitive.Header>\r\n  );\r\n}\r\n\r\nfunction AccordionContent({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\r\n  const { value: accordionValue, type } = useAccordion();\r\n  const { value: itemValue } = useAccordionItem();\r\n  const isOpen =\r\n    type === \"single\"\r\n      ? accordionValue === itemValue\r\n      : accordionValue.includes(itemValue);\r\n\r\n  return (\r\n    <AnimatePresence initial={false}>\r\n      {isOpen && (\r\n        <motion.div\r\n          initial={{ opacity: 0, height: 0 }}\r\n          animate={{ opacity: 1, height: \"auto\" }}\r\n          exit={{ opacity: 0, height: 0 }}\r\n          transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n        >\r\n          <AccordionPrimitive.Content\r\n            data-slot=\"accordion-content\"\r\n            className={cn(\"overflow-hidden text-sm pt-0 pb-4\", className)}\r\n            forceMount\r\n            {...props}\r\n          >\r\n            {children}\r\n          </AccordionPrimitive.Content>\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\r\n",
      "type": "registry:component"
    }
  ]
}