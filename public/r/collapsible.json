{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "collapsible",
  "type": "registry:component",
  "title": "Collapsible",
  "description": "UI component for Collapsible.",
  "dependencies": ["@radix-ui/react-collapsible", "motion"],
  "files": [
    {
      "path": "components/ui/collapsible.tsx",
      "content": "import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport React, { createContext, useContext, useMemo, useState } from \"react\";\n\ntype CollapsibleContextType = {\n  isOpen: boolean;\n  setIsOpen?: (open: boolean) => void;\n};\n\nconst CollapsibleContext = createContext<CollapsibleContextType | null>(null);\n\nfunction useCollapsible() {\n  const context = useContext(CollapsibleContext);\n  if (!context) {\n    throw new Error(\"Collapsible components must be used within a Collapsible\");\n  }\n  return context;\n}\n\nfunction Collapsible({\n  open: openProp,\n  defaultOpen,\n  onOpenChange,\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  const isControlled = openProp !== undefined;\n\n  const [uncontrolledOpen, setUncontrolledOpen] = useState(\n    defaultOpen ?? false\n  );\n\n  const open = isControlled ? openProp : uncontrolledOpen;\n\n  const handleOpenChange = React.useCallback(\n    (value: boolean) => {\n      if (!isControlled) {\n        setUncontrolledOpen(value);\n      }\n      onOpenChange?.(value);\n    },\n    [isControlled, onOpenChange]\n  );\n\n  const contextValue = useMemo(\n    () => ({ isOpen: open, setIsOpen: handleOpenChange }),\n    [open, handleOpenChange]\n  );\n\n  return (\n    <CollapsibleContext.Provider value={contextValue}>\n      <CollapsiblePrimitive.Root\n        open={open}\n        onOpenChange={handleOpenChange}\n        data-slot=\"collapsible\"\n        {...props}\n      />\n    </CollapsibleContext.Provider>\n  );\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  );\n}\n\nfunction CollapsibleContent({\n  children,\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  const { isOpen } = useCollapsible();\n  const childrenArray = React.Children.toArray(children);\n\n  return (\n    <AnimatePresence>\n      {isOpen &&\n        childrenArray.map((child, index) => (\n          <motion.div\n            layout\n            key={index}\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{\n              opacity: 0,\n              y: -10,\n              transition: {\n                duration: 0.3,\n                delay: (childrenArray.length - 1 - index) * 0.05,\n                ease: \"easeOut\",\n              },\n            }}\n            transition={{\n              duration: 0.3,\n              delay: index * 0.05,\n              ease: \"easeOut\",\n            }}\n          >\n            <CollapsiblePrimitive.CollapsibleContent\n              forceMount\n              data-slot=\"collapsible-content\"\n              {...props}\n            >\n              {child}\n            </CollapsiblePrimitive.CollapsibleContent>\n          </motion.div>\n        ))}\n    </AnimatePresence>\n  );\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent };\n",
      "type": "registry:component"
    }
  ]
}
