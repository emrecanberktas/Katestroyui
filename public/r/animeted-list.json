{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animeted-list",
  "type": "registry:component",
  "title": "Animeted List",
  "description": "UI component for Animeted List.",
  "files": [
    {
      "path": "registry/new-york/ui/animeted-list.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport React, { useMemo } from \"react\";\n\ninterface AnimatedListItemProps {\n  children: React.ReactNode;\n  index: number;\n  className?: string;\n  transition?: any;\n  initial?: any;\n  animate?: any;\n  exit?: any;\n  delayFactor?: number;\n  reverse?: boolean;\n  direction?: \"vertical\" | \"horizontal\";\n}\n\nfunction AnimatedListItem({\n  children,\n  index,\n  className,\n  transition,\n  initial,\n  animate,\n  exit,\n  delayFactor = 0.03,\n  reverse = false,\n  direction = \"vertical\",\n}: AnimatedListItemProps) {\n  const delay = (reverse ? -index : index) * delayFactor;\n\n  const getInitialState = () => {\n    if (initial) return initial;\n    if (direction === \"horizontal\") {\n      return { opacity: 0, x: -50, scale: 0.9, filter: \"blur(5px)\" };\n    }\n    return { opacity: 0, y: 20, scale: 0.95, filter: \"blur(5px)\" };\n  };\n\n  const getAnimateState = () => {\n    if (animate) return animate;\n    return { opacity: 1, x: 0, y: 0, scale: 1, filter: \"blur(0px)\" };\n  };\n\n  const getExitState = () => {\n    if (exit) return exit;\n    if (direction === \"horizontal\") {\n      return { opacity: 0, x: 50, scale: 0.9, filter: \"blur(5px)\" };\n    }\n    return { opacity: 0, y: -20, scale: 0.95, filter: \"blur(5px)\" };\n  };\n\n  return (\n    <motion.div\n      initial={getInitialState()}\n      animate={getAnimateState()}\n      exit={getExitState()}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      transition={{\n        type: \"spring\",\n        stiffness: 120,\n        damping: 20,\n        delay,\n        ...transition,\n      }}\n      layout\n      className={cn(\"w-full\", className)}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nexport interface AnimatedListProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode[];\n  transition?: any;\n  initial?: any;\n  animate?: any;\n  exit?: any;\n  itemClassName?: string;\n  delayFactor?: number;\n  reverse?: boolean;\n  emptyMessage?: React.ReactNode;\n  direction?: \"vertical\" | \"horizontal\";\n}\n\nexport function AnimatedList({\n  children,\n  className,\n  transition,\n  initial,\n  animate,\n  exit,\n  itemClassName,\n  delayFactor = 0.03,\n  reverse = false,\n  emptyMessage = \"Liste boÅŸ\",\n  direction = \"vertical\",\n  ...props\n}: AnimatedListProps) {\n  const childrenArray = useMemo(\n    () => React.Children.toArray(children),\n    [children]\n  );\n  const isEmpty = childrenArray.length === 0;\n\n  const {\n    onAnimationStart,\n    onAnimationEnd,\n    onAnimationIteration,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragLeave,\n    onDragOver,\n    onDrop,\n    ...motionProps\n  } = props;\n\n  return (\n    <motion.div\n      className={cn(\n        \"gap-4\",\n        direction === \"horizontal\"\n          ? \"flex flex-row flex-wrap items-start justify-center\"\n          : \"flex flex-col items-center\",\n        className\n      )}\n      {...motionProps}\n    >\n      <AnimatePresence mode=\"popLayout\">\n        {isEmpty ? (\n          <motion.div\n            layout\n            key=\"empty\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{\n              opacity: 1,\n              y: 0,\n              transition: { type: \"spring\", stiffness: 100, damping: 15 },\n            }}\n            exit={{ opacity: 0, y: -20 }}\n            className=\"text-muted-foreground text-sm flex items-center gap-2\"\n          >\n            <motion.span\n              animate={{\n                rotate: [0, 10, -10, 0],\n                transition: { repeat: Infinity, duration: 1.5 },\n              }}\n            >\n              ðŸ˜•\n            </motion.span>\n            {emptyMessage}\n          </motion.div>\n        ) : (\n          childrenArray.map((child, index) => (\n            <AnimatedListItem\n              key={(child as any).key ?? index}\n              index={index}\n              transition={transition}\n              initial={initial}\n              animate={animate}\n              exit={exit}\n              className={itemClassName}\n              delayFactor={delayFactor}\n              reverse={reverse}\n              direction={direction}\n            >\n              {child}\n            </AnimatedListItem>\n          ))\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}