{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert-dialog",
  "type": "registry:component",
  "title": "Alert Dialog",
  "description": "UI component for Alert Dialog.",
  "files": [
    {
      "path": "components/ui/alert-dialog.tsx",
      "content": "\nimport * as React from \"react\";\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { AnimatePresence, motion } from \"motion/react\";\n\ntype AlertDialogContextType = {\n  isOpen: boolean;\n};\n\nconst AlertDialogContext = React.createContext<\n  AlertDialogContextType | undefined\n>(undefined);\n\nconst useAlertDialog = (): AlertDialogContextType => {\n  const context = React.useContext(AlertDialogContext);\n  if (!context) {\n    throw new Error(\"useAlertDialog must be used within an AlertDialog\");\n  }\n  return context;\n};\n\nfunction AlertDialog({\n  children,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false\n  );\n\n  React.useEffect(() => {\n    if (props?.open !== undefined) setIsOpen(props.open);\n  }, [props?.open]);\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props]\n  );\n\n  return (\n    <AlertDialogContext.Provider value={{ isOpen }}>\n      <AlertDialogPrimitive.Root\n        data-slot=\"alert-dialog\"\n        {...props}\n        onOpenChange={handleOpenChange}\n      >\n        {children}\n      </AlertDialogPrimitive.Root>\n    </AlertDialogContext.Provider>\n  );\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  );\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  );\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\"fixed inset-0 z-50 bg-black/50\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogContent({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  const { isOpen } = useAlertDialog();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <AlertDialogPortal forceMount>\n          <AlertDialogOverlay asChild forceMount>\n            <motion.div\n              initial={{ opacity: 0, filter: \"blur(4px)\" }}\n              animate={{ opacity: 1, filter: \"blur(0px)\" }}\n              exit={{ opacity: 0, filter: \"blur(4px)\" }}\n              transition={{ duration: 0.2, ease: \"easeInOut\" }}\n            />\n          </AlertDialogOverlay>\n          <AlertDialogPrimitive.Content\n            forceMount\n            asChild\n            data-slot=\"alert-dialog-content\"\n            {...props}\n          >\n            <motion.div\n              initial={{\n                opacity: 0,\n                scale: 0.2,\n                rotate: 15,\n                filter: \"blur(12px)\",\n                transformOrigin: \"50% 50%\",\n              }}\n              animate={{\n                opacity: 1,\n                scale: 1,\n                rotate: 0,\n                filter: \"blur(0px)\",\n                transformOrigin: \"50% 50%\",\n              }}\n              exit={{\n                opacity: 0,\n                scale: 0.1,\n                rotate: -25,\n                filter: \"blur(20px)\",\n                transformOrigin: \"50% 50%\",\n              }}\n              transition={{\n                type: \"spring\",\n                stiffness: 140,\n                damping: 18,\n              }}\n              className={cn(\n                \"fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border bg-background p-6 shadow-lg sm:max-w-lg\",\n                className\n              )}\n            >\n              {children}\n            </motion.div>\n          </AlertDialogPrimitive.Content>\n        </AlertDialogPortal>\n      )}\n    </AnimatePresence>\n  );\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n  useAlertDialog,\n};\n",
      "type": "registry:component"
    }
  ]
}