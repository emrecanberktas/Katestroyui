{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-menu",
  "type": "registry:component",
  "title": "Dropdown Menu",
  "description": "UI component for Dropdown Menu.",
  "files": [
    {
      "path": "components/ui/dropdown-menu.tsx",
      "content": "import * as React from \"react\";\r\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\r\nimport { ChevronRightIcon, CircleIcon } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { createContext, useContext, useMemo } from \"react\";\r\nimport { AnimatePresence, motion } from \"motion/react\";\r\nimport { Checkbox } from \"./checkbox\";\r\n\r\nconst DropdownMenuContext = createContext<{ isOpen: boolean } | null>(null);\r\nconst DropdownSubMenuContext = createContext<{ isOpen: boolean } | null>(null);\r\n\r\nfunction useDropdownSubMenu() {\r\n  const context = useContext(DropdownSubMenuContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      \"DropdownSubMenu components must be used within a DropdownSubMenu\"\r\n    );\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction useDropdownMenu() {\r\n  const context = useContext(DropdownMenuContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      \"DropdownMenu components must be used within a DropdownMenu\"\r\n    );\r\n  }\r\n  return context;\r\n}\r\n\r\nfunction DropdownMenu({\r\n  open: openProp,\r\n  defaultOpen,\r\n  onOpenChange,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\r\n  const isControlled = openProp !== undefined;\r\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(\r\n    defaultOpen ?? false\r\n  );\r\n\r\n  const open = isControlled ? openProp : uncontrolledOpen;\r\n\r\n  const handleOpenChange = (value: boolean) => {\r\n    if (!isControlled) {\r\n      setUncontrolledOpen(value);\r\n    }\r\n    onOpenChange?.(value);\r\n  };\r\n\r\n  const contextValue = useMemo(() => ({ isOpen: open }), [open]);\r\n\r\n  return (\r\n    <DropdownMenuContext.Provider value={contextValue}>\r\n      <DropdownMenuPrimitive.Root\r\n        data-slot=\"dropdown-menu\"\r\n        open={open}\r\n        onOpenChange={handleOpenChange}\r\n        {...props}\r\n      />\r\n    </DropdownMenuContext.Provider>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuPortal({\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\r\n  return (\r\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuTrigger({\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\r\n  return (\r\n    <DropdownMenuPrimitive.Trigger\r\n      data-slot=\"dropdown-menu-trigger\"\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuContent({\r\n  className,\r\n  sideOffset = 4,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\r\n  const { isOpen } = useDropdownMenu();\r\n\r\n  return (\r\n    <DropdownMenuPrimitive.Portal forceMount>\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <DropdownMenuPrimitive.Content\r\n            sideOffset={sideOffset}\r\n            data-slot=\"dropdown-menu-content\"\r\n            asChild\r\n            {...props}\r\n          >\r\n            <motion.div\r\n              initial={{ opacity: 0, scale: 0.95, y: -10 }}\r\n              animate={{ opacity: 1, scale: 1, y: 0 }}\r\n              exit={{ opacity: 0, scale: 0.95, y: -10 }}\r\n              transition={{\r\n                duration: 0.2,\r\n                ease: \"easeOut\",\r\n                when: \"beforeChildren\",\r\n              }}\r\n              className={cn(\r\n                \"bg-popover text-popover-foreground z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] origin-[var(--radix-dropdown-menu-content-transform-origin)] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\r\n                className\r\n              )}\r\n            >\r\n              {React.Children.map(children, (child, index) => (\r\n                <AnimatePresence key={index}>\r\n                  {isOpen && (\r\n                    <motion.div\r\n                      initial={{ opacity: 0, y: -10 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      exit={{ opacity: 0, y: -10 }}\r\n                      transition={{\r\n                        duration: 0.4,\r\n                        delay: index * 0.05,\r\n                        ease: \"easeOut\",\r\n                      }}\r\n                    >\r\n                      {child}\r\n                    </motion.div>\r\n                  )}\r\n                </AnimatePresence>\r\n              ))}\r\n            </motion.div>\r\n          </DropdownMenuPrimitive.Content>\r\n        )}\r\n      </AnimatePresence>\r\n    </DropdownMenuPrimitive.Portal>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuGroup({\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\r\n  return (\r\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuItem({\r\n  className,\r\n  inset,\r\n  variant = \"default\",\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\r\n  inset?: boolean;\r\n  variant?: \"default\" | \"destructive\";\r\n}) {\r\n  return (\r\n    <DropdownMenuPrimitive.Item\r\n      data-slot=\"dropdown-menu-item\"\r\n      data-inset={inset}\r\n      data-variant={variant}\r\n      className={cn(\r\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuCheckboxItem({\r\n  className,\r\n  children,\r\n  checked,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\r\n  return (\r\n    <DropdownMenuPrimitive.CheckboxItem\r\n      data-slot=\"dropdown-menu-checkbox-item\"\r\n      className={cn(\r\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n        className\r\n      )}\r\n      checked={checked}\r\n      {...props}\r\n    >\r\n      <Checkbox />\r\n      {children}\r\n    </DropdownMenuPrimitive.CheckboxItem>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuRadioGroup({\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\r\n  return (\r\n    <DropdownMenuPrimitive.RadioGroup\r\n      data-slot=\"dropdown-menu-radio-group\"\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuRadioItem({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\r\n  return (\r\n    <DropdownMenuPrimitive.RadioItem\r\n      data-slot=\"dropdown-menu-radio-item\"\r\n      className={cn(\r\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\r\n        <DropdownMenuPrimitive.ItemIndicator>\r\n          <CircleIcon className=\"size-2 fill-current\" />\r\n        </DropdownMenuPrimitive.ItemIndicator>\r\n      </span>\r\n      {children}\r\n    </DropdownMenuPrimitive.RadioItem>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuLabel({\r\n  className,\r\n  inset,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\r\n  inset?: boolean;\r\n}) {\r\n  return (\r\n    <DropdownMenuPrimitive.Label\r\n      data-slot=\"dropdown-menu-label\"\r\n      data-inset={inset}\r\n      className={cn(\r\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuSeparator({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\r\n  return (\r\n    <DropdownMenuPrimitive.Separator\r\n      data-slot=\"dropdown-menu-separator\"\r\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuShortcut({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<\"span\">) {\r\n  return (\r\n    <span\r\n      data-slot=\"dropdown-menu-shortcut\"\r\n      className={cn(\r\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropdownMenuSub({\r\n  open: openProp,\r\n  defaultOpen,\r\n  onOpenChange,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\r\n  const isControlled = openProp !== undefined;\r\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(\r\n    defaultOpen ?? false\r\n  );\r\n\r\n  const open = isControlled ? openProp : uncontrolledOpen;\r\n\r\n  const handleOpenChange = (value: boolean) => {\r\n    if (!isControlled) {\r\n      setUncontrolledOpen(value);\r\n    }\r\n    onOpenChange?.(value);\r\n  };\r\n\r\n  const contextValue = useMemo(() => ({ isOpen: open }), [open]);\r\n\r\n  return (\r\n    <DropdownSubMenuContext.Provider value={contextValue}>\r\n      <DropdownMenuPrimitive.Sub\r\n        data-slot=\"dropdown-menu-sub\"\r\n        open={open}\r\n        onOpenChange={handleOpenChange}\r\n        {...props}\r\n      />\r\n    </DropdownSubMenuContext.Provider>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuSubTrigger({\r\n  className,\r\n  inset,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n  inset?: boolean;\r\n}) {\r\n  return (\r\n    <DropdownMenuPrimitive.SubTrigger\r\n      data-slot=\"dropdown-menu-sub-trigger\"\r\n      data-inset={inset}\r\n      className={cn(\r\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronRightIcon className=\"ml-auto size-4\" />\r\n    </DropdownMenuPrimitive.SubTrigger>\r\n  );\r\n}\r\n\r\nfunction DropdownMenuSubContent({\r\n  children,\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\r\n  const { isOpen } = useDropdownSubMenu();\r\n\r\n  return (\r\n    <DropdownMenuPrimitive.Portal forceMount>\r\n      <AnimatePresence mode=\"wait\">\r\n        {isOpen && (\r\n          <DropdownMenuPrimitive.SubContent\r\n            data-slot=\"dropdown-menu-sub-content\"\r\n            asChild\r\n            forceMount\r\n            {...props}\r\n          >\r\n            <motion.div\r\n              initial={{ opacity: 0, x: -10 }}\r\n              animate={{ opacity: 1, x: 0 }}\r\n              exit={{ opacity: 0, x: -10 }}\r\n              transition={{\r\n                duration: 0.3,\r\n                ease: \"easeInOut\",\r\n                when: \"beforeChildren\",\r\n              }}\r\n              className={cn(\r\n                \"bg-popover text-popover-foreground z-50 min-w-[8rem] origin-[var(--radix-dropdown-menu-content-transform-origin)] overflow-hidden rounded-md border p-1 shadow-lg\",\r\n                className\r\n              )}\r\n            >\r\n              {React.Children.map(children, (child, index) => (\r\n                <motion.div\r\n                  key={index}\r\n                  initial={{ opacity: 0, x: -10 }}\r\n                  animate={{ opacity: 1, x: 0 }}\r\n                  exit={{ opacity: 0, x: -10 }}\r\n                  transition={{\r\n                    duration: 0.4,\r\n                    delay: index * 0.05,\r\n                    ease: \"easeOut\",\r\n                  }}\r\n                >\r\n                  {child}\r\n                </motion.div>\r\n              ))}\r\n            </motion.div>\r\n          </DropdownMenuPrimitive.SubContent>\r\n        )}\r\n      </AnimatePresence>\r\n    </DropdownMenuPrimitive.Portal>\r\n  );\r\n}\r\n\r\nexport {\r\n  DropdownMenu,\r\n  DropdownMenuPortal,\r\n  DropdownMenuTrigger,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuLabel,\r\n  DropdownMenuItem,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuSub,\r\n  DropdownMenuSubTrigger,\r\n  DropdownMenuSubContent,\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}