{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flip-card",
  "type": "registry:component",
  "title": "Flip Card",
  "description": "UI component for Flip Card.",
  "dependencies": ["motion"],
  "files": [
    {
      "path": "components/ui/flip-card.tsx",
      "content": "import React, { useState, useImperativeHandle, forwardRef } from \"react\";\r\nimport { Easing, motion } from \"motion/react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface FlipCardProps {\r\n  frontContent: React.ReactNode;\r\n  backContent: React.ReactNode;\r\n  width?: string;\r\n  height?: string;\r\n  flipDirection?: \"horizontal\" | \"vertical\";\r\n  className?: string;\r\n  disabled?: boolean;\r\n  initialFlipped?: boolean;\r\n  onFlip?: (isFlipped: boolean) => void;\r\n  flipTrigger?: \"click\" | \"hover\" | \"manual\";\r\n  duration?: number;\r\n  easing?: Easing | Easing[];\r\n}\r\n\r\nexport interface FlipCardHandle {\r\n  flip: () => void;\r\n  setFlipped: (flipped: boolean) => void;\r\n  isFlipped: boolean;\r\n}\r\n\r\nconst FlipCard = forwardRef<FlipCardHandle, FlipCardProps>(\r\n  (\r\n    {\r\n      frontContent,\r\n      backContent,\r\n      width = \"w-80\",\r\n      height = \"h-96\",\r\n      flipDirection = \"horizontal\",\r\n      className,\r\n      disabled = false,\r\n      initialFlipped = false,\r\n      onFlip,\r\n      flipTrigger = \"click\",\r\n      duration = 0.6,\r\n      easing = \"easeInOut\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [isFlipped, setIsFlipped] = useState(initialFlipped);\r\n\r\n    const handleFlip = () => {\r\n      if (disabled || flipTrigger === \"manual\") return;\r\n      const newFlippedState = !isFlipped;\r\n      setIsFlipped(newFlippedState);\r\n      onFlip?.(newFlippedState);\r\n    };\r\n\r\n    const handleMouseEnter = () => {\r\n      if (flipTrigger === \"hover\" && !disabled) {\r\n        setIsFlipped(true);\r\n        onFlip?.(true);\r\n      }\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n      if (flipTrigger === \"hover\" && !disabled) {\r\n        setIsFlipped(false);\r\n        onFlip?.(false);\r\n      }\r\n    };\r\n\r\n    useImperativeHandle(\r\n      ref,\r\n      () => ({\r\n        flip: () => {\r\n          const newFlippedState = !isFlipped;\r\n          setIsFlipped(newFlippedState);\r\n          onFlip?.(newFlippedState);\r\n        },\r\n        setFlipped: (flipped: boolean) => {\r\n          setIsFlipped(flipped);\r\n          onFlip?.(flipped);\r\n        },\r\n        get isFlipped() {\r\n          return isFlipped;\r\n        },\r\n      }),\r\n      [isFlipped, onFlip]\r\n    );\r\n\r\n    const flipVariants = {\r\n      horizontal: {\r\n        front: {\r\n          rotateY: isFlipped ? 180 : 0,\r\n        },\r\n        back: {\r\n          rotateY: isFlipped ? 0 : -180,\r\n        },\r\n      },\r\n      vertical: {\r\n        front: {\r\n          rotateX: isFlipped ? 180 : 0,\r\n        },\r\n        back: {\r\n          rotateX: isFlipped ? 0 : -180,\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          width,\r\n          height,\r\n          \"perspective-1000\",\r\n          !disabled && flipTrigger === \"click\" && \"cursor-pointer\",\r\n          className\r\n        )}\r\n        onClick={flipTrigger === \"click\" ? handleFlip : undefined}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n      >\r\n        <motion.div\r\n          className=\"relative w-full h-full\"\r\n          style={{ transformStyle: \"preserve-3d\" }}\r\n        >\r\n          <motion.div\r\n            className=\"absolute inset-0\"\r\n            variants={flipVariants[flipDirection]}\r\n            animate=\"front\"\r\n            transition={{ duration, ease: easing }}\r\n            style={{ backfaceVisibility: \"hidden\" }}\r\n          >\r\n            {frontContent}\r\n          </motion.div>\r\n\r\n          <motion.div\r\n            className=\"absolute inset-0\"\r\n            variants={flipVariants[flipDirection]}\r\n            animate=\"back\"\r\n            transition={{ duration, ease: easing }}\r\n            style={{\r\n              backfaceVisibility: \"hidden\",\r\n              transform:\r\n                flipDirection === \"horizontal\"\r\n                  ? \"rotateY(-180deg)\"\r\n                  : \"rotateX(-180deg)\",\r\n            }}\r\n          >\r\n            {backContent}\r\n          </motion.div>\r\n        </motion.div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nFlipCard.displayName = \"FlipCard\";\r\nexport { FlipCard };\r\n",
      "type": "registry:component"
    }
  ]
}
