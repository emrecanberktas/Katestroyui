{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "type-writer-effect",
  "type": "registry:component",
  "title": "Type Writer Effect",
  "description": "UI component for Type Writer Effect.",
  "dependencies": ["motion"],
  "files": [
    {
      "path": "components/ui/type-writer-effect.tsx",
      "content": "import React, { useState, useEffect, useRef } from \"react\";\r\nimport { motion } from \"motion/react\";\r\n\r\ninterface TypewriterEffectProps {\r\n  text?: string;\r\n  texts?: string[];\r\n  speed?: number;\r\n  deleteSpeed?: number;\r\n  delayBetween?: number;\r\n  loop?: boolean;\r\n  showCursor?: boolean;\r\n  cursorChar?: string;\r\n  className?: string;\r\n  onComplete?: () => void;\r\n  onTextChange?: (currentText: string, index: number) => void;\r\n  startDelay?: number;\r\n  preserveHeight?: boolean;\r\n  randomSpeed?: boolean;\r\n  pauseOnHover?: boolean;\r\n  enableCharBounce?: boolean;\r\n}\r\n\r\nconst cn = (...classes: (string | undefined)[]) =>\r\n  classes.filter(Boolean).join(\" \");\r\n\r\nconst TypewriterEffect: React.FC<TypewriterEffectProps> = ({\r\n  text,\r\n  texts = [],\r\n  speed = 100,\r\n  deleteSpeed = 50,\r\n  delayBetween = 2000,\r\n  loop = true,\r\n  showCursor = true,\r\n  cursorChar = \"|\",\r\n  className,\r\n  onComplete,\r\n  onTextChange,\r\n  startDelay = 0,\r\n  preserveHeight = false,\r\n  randomSpeed = false,\r\n  pauseOnHover = false,\r\n  enableCharBounce = true,\r\n}) => {\r\n  const [displayedText, setDisplayedText] = useState<string[]>([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const allTexts = text ? [text] : texts;\r\n  const currentText = allTexts[currentIndex] || \"\";\r\n\r\n  const getRandomSpeed = (baseSpeed: number) =>\r\n    randomSpeed ? baseSpeed + Math.random() * 50 - 25 : baseSpeed;\r\n\r\n  useEffect(() => {\r\n    if (allTexts.length === 0 || isPaused) return;\r\n\r\n    const handleTyping = () => {\r\n      const joinedText = displayedText.join(\"\");\r\n\r\n      if (!isDeleting && joinedText === currentText) {\r\n        onTextChange?.(currentText, currentIndex);\r\n\r\n        if (loop && allTexts.length > 1) {\r\n          timeoutRef.current = setTimeout(\r\n            () => setIsDeleting(true),\r\n            delayBetween\r\n          );\r\n        } else {\r\n          onComplete?.();\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (isDeleting && joinedText === \"\") {\r\n        setIsDeleting(false);\r\n        setCurrentIndex((prev) => (prev + 1) % allTexts.length);\r\n        return;\r\n      }\r\n\r\n      const timeout = setTimeout(() => {\r\n        setDisplayedText((prev) => {\r\n          if (isDeleting) return prev.slice(0, -1);\r\n          const nextChar = currentText[prev.length];\r\n          return [...prev, nextChar];\r\n        });\r\n      }, getRandomSpeed(isDeleting ? deleteSpeed : speed));\r\n\r\n      timeoutRef.current = timeout;\r\n    };\r\n\r\n    if (startDelay && displayedText.length === 0 && !isDeleting) {\r\n      timeoutRef.current = setTimeout(handleTyping, startDelay);\r\n    } else {\r\n      handleTyping();\r\n    }\r\n\r\n    return () => {\r\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    };\r\n  }, [displayedText, isDeleting, currentIndex, isPaused]);\r\n\r\n  const handleMouseEnter = () => pauseOnHover && setIsPaused(true);\r\n  const handleMouseLeave = () => pauseOnHover && setIsPaused(false);\r\n\r\n  return (\r\n    <span\r\n      className={cn(\"inline-block\", className)}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n      style={{\r\n        display: \"inline-block\",\r\n        whiteSpace: \"pre\",\r\n        minHeight: preserveHeight ? \"1.2em\" : undefined,\r\n      }}\r\n    >\r\n      {displayedText.map((char, i) => (\r\n        <motion.span\r\n          key={i}\r\n          initial={{ y: -2 }}\r\n          animate={{ y: 0 }}\r\n          transition={{ duration: enableCharBounce ? 0.1 : 0 }}\r\n          style={{ display: \"inline-block\" }}\r\n        >\r\n          {char}\r\n        </motion.span>\r\n      ))}\r\n\r\n      {showCursor && (\r\n        <motion.span\r\n          animate={{ opacity: [1, 0, 1] }}\r\n          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\r\n          className=\"ml-1 inline-block\"\r\n        >\r\n          {cursorChar}\r\n        </motion.span>\r\n      )}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TypewriterEffect;\r\n",
      "type": "registry:component"
    }
  ]
}
