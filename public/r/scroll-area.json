{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scroll-area",
  "type": "registry:component",
  "title": "Scroll Area",
  "description": "UI component for Scroll Area.",
  "dependencies": ["@radix-ui/react-scroll-area", "motion"],
  "files": [
    {
      "path": "components/ui/scroll-area.tsx",
      "content": "import * as React from \"react\";\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\nimport { motion, useAnimation } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ScrollAreaProps\n  extends React.ComponentProps<typeof ScrollAreaPrimitive.Root> {\n  orientation?: \"vertical\" | \"horizontal\";\n}\n\nfunction ScrollArea({\n  className,\n  children,\n  orientation = \"vertical\",\n  ...props\n}: ScrollAreaProps) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\n        \"relative\",\n        orientation === \"horizontal\" && \"w-[75vmin] aspect-[4/2] flex\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className={cn(\n          \"size-full rounded-[inherit] outline-none transition-[color,box-shadow]\",\n          \"focus-visible:ring-[3px] focus-visible:ring-ring/50 focus-visible:outline-1\"\n        )}\n      >\n        <div\n          className={cn(\n            \"list-none p-0\",\n            orientation === \"horizontal\"\n              ? \"grid grid-flow-col auto-cols-[25%]\"\n              : \"grid grid-cols-1\"\n          )}\n        >\n          {children}\n        </div>\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar orientation={orientation} />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  );\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none\",\n        orientation === \"vertical\" &&\n          \"h-full w-2.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-2.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  );\n}\n\ninterface ScrollAreaItemProps\n  extends Omit<React.ComponentProps<typeof motion.li>, \"children\"> {\n  as?: React.ElementType;\n  orientation?: \"vertical\" | \"horizontal\";\n  children?: React.ReactNode;\n}\n\nfunction isProbablyMotionValue(val: unknown): boolean {\n  return (\n    typeof val === \"object\" &&\n    val !== null &&\n    typeof (val as { get: () => unknown }).get === \"function\"\n  );\n}\n\nfunction filterMotionValues(node: React.ReactNode): React.ReactNode {\n  if (Array.isArray(node)) {\n    return node.map(filterMotionValues);\n  }\n  return isProbablyMotionValue(node) ? null : node;\n}\n\nconst ScrollAreaItem = ({\n  className,\n  orientation = \"vertical\",\n  children,\n  ...props\n}: ScrollAreaItemProps) => {\n  const ref = React.useRef<HTMLLIElement>(null);\n  const controls = useAnimation();\n\n  React.useEffect(() => {\n    if (!ref.current) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          controls.start({\n            opacity: 1,\n            [orientation === \"vertical\" ? \"scaleX\" : \"scaleY\"]: 1,\n          });\n          ref.current?.style.setProperty(\"--shown\", \"1\");\n        } else {\n          controls.start({\n            opacity: 0,\n            [orientation === \"vertical\" ? \"scaleX\" : \"scaleY\"]: 0.25,\n          });\n          ref.current?.style.setProperty(\"--shown\", \"0\");\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    observer.observe(ref.current);\n\n    return () => observer.disconnect();\n  }, [controls, orientation]);\n\n  const initial =\n    orientation === \"vertical\"\n      ? { opacity: 0, scaleX: 0.25 }\n      : { opacity: 0, scaleY: 0.25 };\n\n  const { style, ...rest } = props;\n  const safeChildren = filterMotionValues(children);\n  return (\n    <motion.li\n      ref={ref}\n      initial={initial}\n      animate={controls}\n      transition={{ duration: 0.5, ease: [0.25, 1, 0.5, 1] }}\n      className={cn(\n        \"p-0 max-w-full\",\n        \"min-h-[40px] h-[8vmin] col-span-full\",\n        \"overflow-hidden will-change-transform backface-hidden\",\n        orientation === \"horizontal\" && \"min-w-[25%]\",\n        className\n      )}\n      style={{\n        ...(style as React.CSSProperties),\n        transformOrigin: orientation === \"vertical\" ? \"top\" : \"left\",\n      }}\n      {...rest}\n    >\n      <div className={cn(\"card h-full\")}>{safeChildren}</div>\n    </motion.li>\n  );\n};\n\nexport { ScrollArea, ScrollBar, ScrollAreaItem };\n",
      "type": "registry:component"
    }
  ]
}
